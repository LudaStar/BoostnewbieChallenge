1. 메모리 주소

- 16진수 : 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F 사용
- 16진수 앞에는 0x를 붙임
- 컴퓨터는 8개의 비트가 모인 바이트 단위로 정보를 표현하므로 2개의 16진수는 1byte의 2진수로 변환
ex) 10진수 65 -> 2진수 0100 0001 -> 8진수 0x41


2. 포인터

int n = 50;
int *p = &n;
정수형 변수 n에 50이라는 값이 저장되어 있고, *p라는 포인터 변수에 n의 주소를 저장.
printf("%p\n", p); -> 변수 n의 주소를 출력
printf("%i\n", *p); -> p가 가리키는 변수의 값, 즉 변수 n의 값 출력


3. 문자열

EMMA가 저장될 때, E M M A /0 이렇게 5바이트가 저장 /0는 종단문자로 문자열의 끝을 구별. 8개의 0임
string s = "EMMA";
char *s = "EMMA";
string은 char의 주소를 가지고 있는 변수. 위의 상황에선 E의 주소를 저장하고 있음

typedef char *string; -> cs50.h에 적혀있었음


4. 문자열 비교 (address.c, compare.c 참고)

char *s = "EMMA";
printf("%p\n", s); // E의 메모리 주소 출력

printf("%p\n", &s[0]); // E에 해당하는 주소값
printf("%p\n", &s[1]); // M에 해당하는 주소값
printf("%p\n", &s[2]);
printf("%p\n", &s[3]);

printf("%c\n", *s); // E 출력
printf("%c\n", *(s+1)); // M 출력
printf("%c\n", *(s+2)); // M 출력
printf("%c\n", *(s+3)); // A 출력

사용자로부터 get_string로 s와 t 두 개의 문자열을 입력받아서
s == t 라고 비교하면 둘의 주소값을 비교하는 거기때문에 같지 않음


5. 문자열 복사 (copy.c, copy2.c 참고)

string s = get_string("s : ");
처럼 입력받으면 s에는 문자열이 있는 메모리의 주소가 저장
string s 와 char *s는 동일한 의미

메모리 할당 함수 malloc()
char *t = malloc(strlen(s) + 1); // 문자열s의 길이 + 널 종단 문자


6. 메모리 할당과 해제(memory.c 참고)

malloc 함수를 이용하여 메모리를 할당한 후에는 free라는 함수로 메모리를 해제해야 함

valgrind 프로그램 사용 -> 버그 잡는데 사용
help50 valgrind ./copy2 처럼 사용가능 (help50는 안 써도 되나 쓰면 좋음)

valgrind로 버퍼 오버플로우, 메모리 누수 등을 발견할 수 있다.


7. 메모리 교환, 스택, 힙 (noswap.c, swap.c)

메모리 안에는 데이터가 저장되는 구역이 나뉘어져 있다.

머신코드 - 프로그램이 실행될 때 그 프로그램이 컴파일된 바이너리가 저장
글로벌 - 프로그램 안에서 저장된 전역 변수가 저장
힙 - malloc으로 할당된 메모리의 데이터 저장
스택 - 프로그램 내의 함수와 관련된 것들이 저장. 함수가 호출될 때 지역 변수가 쌓이며 저장

힙 영역에서는 malloc에 의해 메모리가 더 할당 될수록 사용하는 메모리의 범위가 아래로 늘어나고,
스택 영역에서도 함수가 더 많이 호출 될수록 사용하는 메모리의 범위가 위로 늘어나면서
힙 오버플로우, 스택 오버플로우가 발생할 수 있음


8. 파일 쓰기(scanf.c, phonebook2.c, phonbook2.csv)

scanf함수 - 사용자로부터 형식 지정자에 해당되는 값을 입력받아 저장하는 함수

get_int 코드에서는 &x 로 그 주소를 입력해주었음을 유의 (scanf.c)
get_string 코드에서는 scanf에 그대로 s를 입력해주었음 (scanf.c)

fopen 함수 - FILE이라는 자료형 불러올 수 있음
    FILE *file = fopen("phonebook.csv", "a");
    //두 번째 인자 -> r : read, w : write, a : append
fprintf 함수 - 파일에 내용을 직접 출력할 수 있음
fclose 함수 - 파일에 대한 작업 종료


9. 파일 읽기 (jpeg.c)

파일의 내용을 읽어서 파일의 형식이 JPEG 이미지인지 검사하는 프로그램

입력받은 파일명을 읽기(r)모드로 불러온 후 fread 함수를 이용해서 파일의 첫 3 바이트를 읽어온다
fread(배열, 읽을 바이트 수, 읽을 횟수, 읽을 파일)
각 바이트가 0xFF, 0xD8, 0xFF 인지를 확인 -> JPEC파일의 시작점에 꼭 포함되어 있어야함

